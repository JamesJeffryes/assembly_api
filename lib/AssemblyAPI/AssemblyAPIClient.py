# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class AssemblyAPI(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def search_contigs(self, params, context=None):
        """
        :param params: instance of type "SearchAssemblyOptions" (num_found -
           optional field which when set informs that there is no need to
           perform full scan in order to count this value because it was
           already done before; please don't set this value with 0 or any
           guessed number if you didn't get right value previously.) ->
           structure: parameter "ref" of String, parameter "query" of String,
           parameter "sort_by" of list of type "column_sorting" -> tuple of
           size 2: parameter "column" of String, parameter "ascending" of
           type "boolean" (Indicates true or false values, false = 0, true =
           1 @range [0,1]), parameter "start" of Long, parameter "limit" of
           Long, parameter "num_found" of Long
        :returns: instance of type "SearchAssemblyResult" (num_found - number
           of all items found in query search (with only part of it returned
           in "bins" list).) -> structure: parameter "query" of String,
           parameter "start" of Long, parameter "contigs" of list of type
           "AssemblyData" (contig_id - id of the contig description -
           description of the contig (description on fasta header rows)
           length - (bp) length of the contig gc - gc_content of the contig
           is_circ - 0 or 1 value indicating if the contig is circular.  May
           be null if unknown N_count - number of 'N' bases in the contig md5
           - md5 checksum of the sequence) -> structure: parameter
           "contig_id" of String, parameter "description" of String,
           parameter "length" of Long, parameter "gc" of Long, parameter
           "is_circ" of Long, parameter "N_count" of Long, parameter "md5" of
           String, parameter "num_found" of Long
        """
        return self._client.call_method(
            'AssemblyAPI.search_contigs',
            [params], self._service_ver, context)

    def get_assembly_id(self, ref, context=None):
        """
        Retrieve Assembly ID.
        :param ref: instance of type "ObjectReference" (Insert your typespec
           information here.)
        :returns: instance of String
        """
        return self._client.call_method(
            'AssemblyAPI.get_assembly_id',
            [ref], self._service_ver, context)

    def get_genome_annotations(self, ref, context=None):
        """
        Retrieve associated GenomeAnnotation objects.
        @return List of GenomeAnnotation object references
        :param ref: instance of type "ObjectReference" (Insert your typespec
           information here.)
        :returns: instance of list of type "ObjectReference" (Insert your
           typespec information here.)
        """
        return self._client.call_method(
            'AssemblyAPI.get_genome_annotations',
            [ref], self._service_ver, context)

    def get_external_source_info(self, ref, context=None):
        """
        Retrieve the external source information for this Assembly.
        @return Metadata about the external source
        :param ref: instance of type "ObjectReference" (Insert your typespec
           information here.)
        :returns: instance of type "AssemblyExternalSourceInfo" (* * Metadata
           about the external source of this Assembly.) -> structure:
           parameter "external_source" of String, parameter
           "external_source_id" of String, parameter
           "external_source_origination_date" of String
        """
        return self._client.call_method(
            'AssemblyAPI.get_external_source_info',
            [ref], self._service_ver, context)

    def get_stats(self, ref, context=None):
        """
        Retrieve the derived statistical information about this Assembly.
        :param ref: instance of type "ObjectReference" (Insert your typespec
           information here.)
        :returns: instance of type "AssemblyStats" (* * Derived statistical
           information about an assembly.) -> structure: parameter
           "num_contigs" of type "i64", parameter "dna_size" of type "i64",
           parameter "gc_content" of type "double"
        """
        return self._client.call_method(
            'AssemblyAPI.get_stats',
            [ref], self._service_ver, context)

    def get_number_contigs(self, ref, context=None):
        """
        Retrieve the number of contigs for this Assembly.
        @return Total number of contiguous sequences.
        :param ref: instance of type "ObjectReference" (Insert your typespec
           information here.)
        :returns: instance of Long
        """
        return self._client.call_method(
            'AssemblyAPI.get_number_contigs',
            [ref], self._service_ver, context)

    def get_gc_content(self, ref, context=None):
        """
        Retrieve the total GC content for this Assembly.
        @return Proportion of GC content, between 0 and 1.
        :param ref: instance of type "ObjectReference" (Insert your typespec
           information here.)
        :returns: instance of type "double"
        """
        return self._client.call_method(
            'AssemblyAPI.get_gc_content',
            [ref], self._service_ver, context)

    def get_dna_size(self, ref, context=None):
        """
        Retrieve the total DNA size for this Assembly.
        @return Total DNA size
        :param ref: instance of type "ObjectReference" (Insert your typespec
           information here.)
        :returns: instance of Long
        """
        return self._client.call_method(
            'AssemblyAPI.get_dna_size',
            [ref], self._service_ver, context)

    def get_contig_ids(self, ref, context=None):
        """
        Retrieve the contig identifiers for this Assembly.
        @return List of contig IDs.
        :param ref: instance of type "ObjectReference" (Insert your typespec
           information here.)
        :returns: instance of list of String
        """
        return self._client.call_method(
            'AssemblyAPI.get_contig_ids',
            [ref], self._service_ver, context)

    def get_contig_lengths(self, ref, contig_id_list, context=None):
        """
        Retrieve the lengths of the contigs in this Assembly.
        @return Mapping of contig ID to contig length.
        :param ref: instance of type "ObjectReference" (Insert your typespec
           information here.)
        :param contig_id_list: instance of list of String
        :returns: instance of mapping from String to Long
        """
        return self._client.call_method(
            'AssemblyAPI.get_contig_lengths',
            [ref, contig_id_list], self._service_ver, context)

    def get_contig_gc_content(self, ref, contig_id_list, context=None):
        """
        Retrieve the gc content for contigs in this Assembly.
        @return Mapping of contig IDs to GC content proportion.
        :param ref: instance of type "ObjectReference" (Insert your typespec
           information here.)
        :param contig_id_list: instance of list of String
        :returns: instance of mapping from String to type "double"
        """
        return self._client.call_method(
            'AssemblyAPI.get_contig_gc_content',
            [ref, contig_id_list], self._service_ver, context)

    def get_contigs(self, ref, contig_id_list, context=None):
        """
        Retrieve all the data for the contigs in this Assembly.
        @return Mapping of contig ID to details for that contig.
        :param ref: instance of type "ObjectReference" (Insert your typespec
           information here.)
        :param contig_id_list: instance of list of String
        :returns: instance of mapping from String to type "AssemblyContig" ->
           structure: parameter "contig_id" of String, parameter "sequence"
           of String, parameter "length" of type "i64", parameter
           "gc_content" of type "double", parameter "md5" of String,
           parameter "name" of String, parameter "description" of String,
           parameter "is_complete" of type "bool", parameter "is_circular" of
           type "bool"
        """
        return self._client.call_method(
            'AssemblyAPI.get_contigs',
            [ref, contig_id_list], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('AssemblyAPI.status',
                                        [], self._service_ver, context)
